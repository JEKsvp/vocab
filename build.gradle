plugins {
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
}

group = 'com.abadeksvp'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('testcontainersVersion', "1.20.1")
    set('querydslVersion', "5.1.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Querydsl (Jakarta)
    implementation "com.querydsl:querydsl-core:${querydslVersion}"
    implementation ("com.querydsl:querydsl-mongodb:${querydslVersion}") {
        exclude group: 'org.mongodb', module: 'mongo-java-driver'
    }
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:general"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation ("com.querydsl:querydsl-mongodb:${querydslVersion}") {
        exclude group: 'org.mongodb', module: 'mongo-java-driver'
    }
    testAnnotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:general"
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mongodb'
    testImplementation 'commons-io:commons-io:2.15.1'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

// --- Client build integration ---
// Detect Windows to use npm.cmd
def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
def npmCommand = isWindows ? 'npm.cmd' : 'npm'

// Install client dependencies (use install for Windows stability due to file locks)
tasks.register('npmInstall', Exec) {
    workingDir file('client')
    commandLine npmCommand, 'install', '--no-audit', '--no-fund'
}

// Build the React client (outputs to client/dist by project convention)
tasks.register('npmBuild', Exec) {
    dependsOn 'npmInstall'
    workingDir file('client')
    // Ensure BUILD_PATH is set in a cross-platform manner so CRA outputs to client/dist
    environment 'BUILD_PATH', './dist'
    commandLine npmCommand, 'run', 'build'
}

// Include built client in Spring Boot resources via processResources to avoid implicit outputs
// Make processResources depend on npmBuild and copy client/dist into static/
tasks.named('processResources') {
    dependsOn 'npmBuild'
    from('client/dist') {
        into 'static'
    }
}

// No need to wire bootJar/bootRun explicitly; they depend on processResources transitively

tasks.named('test') {
    useJUnitPlatform()
}
